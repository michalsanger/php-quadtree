{"name":"PHP Quadtree","tagline":"An easy-to-modify Quadtree","body":"About\r\n-----\r\n_An easy-to-modify [Quadtree](http://en.wikipedia.org/wiki/Quadtree) with standard 2D implementation._\r\n\r\nUsage\r\n-----\r\nStandard 2D collision detection supports points and bounds (rectangular regions):\r\n\r\n```php\r\nuse \\Quadtree\\Quadtree;\r\nuse \\Quadtree\\Geometry\\Bounds;\r\nuse \\Quadtree\\Geometry\\Point;\r\n\r\n$qtBounds = new Bounds(1024, 1024);\r\n$qt = new Quadtree($qtBounds);\r\n\r\n$qt->insert(new Bounds(300, 200)); // TRUE\r\n$qt->insert(new Bounds(100, 50, 20, 10)); // FALSE\r\n$qt->insert(new Point(250, 100)); // FALSE\r\n$qt->insert(new Point(2000, 500)); // FALSE\r\n$qt->insert(new Point(299, 199)); // TRUE\r\n```\r\n\r\nNeed more logic for collision detection? Create your own [`ICollisionDetector`](https://github.com/michalsanger/php-quadtree/blob/master/Quadtree/ICollisionDetector.php). \r\nNeed to insert other objects then points and bounds? Implement [`Insertable`](https://github.com/michalsanger/php-quadtree/blob/master/Quadtree/Insertable.php) interface.\r\n\r\nInstallation\r\n------------\r\nUse Composer:\r\n```\r\n> composer require michalsanger/quadtree\r\n```\r\n\r\nTests\r\n-----\r\nDue to [Nette Tester](https://github.com/nette/tester/) tests are simple and readable. Run:\r\n```\r\n> vendor/bin/tester tests/\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}